{"version":3,"file":"index.mjs","sources":["../lib/unique.js","../lib/print.js","../lib/main.js","../lib/validate.js","../lib/absdiff.js"],"sourcesContent":["\n/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// FUNCTIONS //\n\n/**\n* Comparator function to sort values in ascending order.\n*\n* @private\n* @param {number} a - first value\n* @param {number} b - second value\n* @returns {number} difference between `a` and `b`\n*/\nfunction ascending( a, b ) {\n\treturn a - b;\n}\n\n\n// MAIN //\n\n/**\n* Removes duplicate values from a numeric array.\n*\n* @private\n* @param {NumberArray} arr - array to be deduped\n* @returns {NumberArray} deduped array\n*/\nfunction unique( arr ) {\n\tvar len;\n\tvar val;\n\tvar i;\n\tvar j;\n\n\tarr = arr.slice();\n\tarr.sort( ascending );\n\tlen = arr.length;\n\n\t// Loop through the array, only incrementing a pointer when successive values are different. When a succeeding value is different, move the pointer and set the next value. In the trivial case where all array elements are unique, we incur a slight penalty in resetting the element value for each unique value. In other cases, we simply move a unique value to a new position in the array. The end result is a sorted array with unique values.\n\tfor ( i = 1, j = 0; i < len; i++ ) {\n\t\tval = arr[ i ];\n\t\tif ( arr[ j ] !== val ) {\n\t\t\tj += 1;\n\t\t\tarr[ j ] = val;\n\t\t}\n\t}\n\t// Truncate the array:\n\tarr.length = j + 1;\n\treturn arr;\n}\n\n\n// EXPORTS //\n\nexport default unique;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPositiveInteger from '@stdlib/assert-is-positive-integer';\nimport isObject from '@stdlib/assert-is-plain-object';\nimport { isPrimitive as isBoolean } from '@stdlib/assert-is-boolean';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport roundn from '@stdlib/math-base-special-roundn';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Pretty-prints test output.\n*\n* @param {Object} [opts] - options object\n* @param {PositiveInteger} [opts.digits=4] - number of digits after the decimal point\n* @param {boolean} [opts.decision=true] - boolean indicating whether to print the test decision\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {string} formatted output\n*/\nfunction print( opts ) { // eslint-disable-line stdlib/no-redeclare\n\t/* eslint-disable no-invalid-this */\n\tvar decision;\n\tvar dgts;\n\tvar str;\n\n\tdgts = 4;\n\tdecision = true;\n\tif ( arguments.length > 0 ) {\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( '1Lf2V', opts ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'digits' ) ) {\n\t\t\tif ( !isPositiveInteger( opts.digits ) ) {\n\t\t\t\tthrow new TypeError( format( '1Lf3P', 'digits', opts.digits ) );\n\t\t\t}\n\t\t\tdgts = opts.digits;\n\t\t}\n\t\tif ( hasOwnProp( opts, 'decision' ) ) {\n\t\t\tif ( !isBoolean( opts.decision ) ) {\n\t\t\t\tthrow new TypeError( format( '1Lf2o', 'decision', opts.decision ) );\n\t\t\t}\n\t\t\tdecision = opts.decision;\n\t\t}\n\t}\n\n\tstr = '';\n\tstr += this.method;\n\tstr += '\\n\\n';\n\tstr += 'Null hypothesis: The variances in all groups are the same.';\n\tstr += '\\n\\n';\n\tstr += '    df 1: ' + roundn( this.df[ 0 ], -dgts ) + '\\n';\n\tstr += '    df 2: ' + roundn( this.df[ 1 ], -dgts ) + '\\n';\n\tstr += '    F score: ' + roundn( this.statistic, -dgts ) + '\\n';\n\tstr += '    P Value: ' + roundn( this.pValue, -dgts ) + '\\n';\n\tstr += '\\n';\n\tif ( decision ) {\n\t\tstr += 'Test Decision: ';\n\t\tif ( this.rejected ) {\n\t\t\tstr += 'Reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t} else {\n\t\t\tstr += 'Fail to reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t}\n\t\tstr += '\\n';\n\t}\n\treturn str;\n}\n\n\n// EXPORTS //\n\nexport default print;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPlainObject from '@stdlib/assert-is-plain-object';\nimport setReadOnly from '@stdlib/utils-define-read-only-property';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport anova1 from '@stdlib/stats-anova1';\nimport absMeanDiff from './absdiff.js';\nimport validate from './validate.js';\nimport unique from './unique.js';\nimport print from './print.js'; // eslint-disable-line stdlib/no-redeclare\n\n\n// MAIN //\n\n/**\n* Computes Levene's test for equal variances.\n*\n* @param {...NumericArray} arguments - either two or more number arrays or a single numeric array if provided an array of group indicators\n* @param {Options} [options] - function options\n* @param {number} [options.alpha=0.05] - significance level\n* @param {Array} [options.groups] - array of group indicators\n* @throws {TypeError} must provide array-like arguments\n* @throws {RangeError} alpha option must be a number on the interval `[0,1]`\n* @throws {Error} must provide at least two array-like arguments if `groups` is not provided\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Object} test results\n*\n* @example\n* // Data from Hollander & Wolfe (1973), p. 116:\n* var x = [ 2.9, 3.0, 2.5, 2.6, 3.2 ];\n* var y = [ 3.8, 2.7, 4.0, 2.4 ];\n* var z = [ 2.8, 3.4, 3.7, 2.2, 2.0 ];\n*\n* var out = levene( x, y, z );\n* // returns {...}\n*/\nfunction levene() {\n\tvar options;\n\tvar result;\n\tvar groups;\n\tvar levels;\n\tvar args;\n\tvar opts;\n\tvar arg;\n\tvar err;\n\tvar out;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tk = arguments.length;\n\targs = [];\n\topts = {};\n\tif ( isPlainObject( arguments[ k-1 ] ) ) {\n\t\toptions = arguments[ k-1 ];\n\t\tk -= 1;\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t} else {\n\t\toptions = {};\n\t}\n\tif ( opts.groups ) {\n\t\targs = arguments[ 0 ];\n\t\tgroups = opts.groups;\n\t\tlevels = unique( groups );\n\t\tk = levels.length;\n\t\tif ( k < 2 ) {\n\t\t\tthrow new Error( format( '1Lf9v', 'groups', levels ) );\n\t\t}\n\t} else {\n\t\tgroups = [];\n\t\targs = [];\n\t\tlevels = [];\n\t\tfor ( i = 0; i < k; i++ ) {\n\t\t\targ = arguments[ i ];\n\t\t\tif ( arg.length === 0 ) {\n\t\t\t\tthrow new Error( format( '1Lf9w', arg ) );\n\t\t\t}\n\t\t\targs = args.concat( arg );\n\t\t\tfor ( j = 0; j < arg.length; j++ ) {\n\t\t\t\tgroups.push( i );\n\t\t\t}\n\t\t\tlevels.push( i );\n\t\t}\n\t}\n\targs = absMeanDiff( args, groups, levels );\n\tresult = anova1( args, groups, options );\n\tout = {};\n\tsetReadOnly( out, 'rejected', result.rejected );\n\tsetReadOnly( out, 'alpha', result.alpha );\n\tsetReadOnly( out, 'pValue', result.pValue );\n\tsetReadOnly( out, 'statistic', result.statistic );\n\tsetReadOnly( out, 'df', [ result.treatment.df, result.error.df ] );\n\tsetReadOnly( out, 'method', 'Levene\\'s test for Homogeneity of Variance' );\n\tsetReadOnly( out, 'print', print );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default levene;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isArray from '@stdlib/assert-is-array';\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number';\nimport isObject from '@stdlib/assert-is-plain-object';\nimport isnan from '@stdlib/assert-is-nan';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination for validated options\n* @param {Options} options - function options\n* @param {number} [options.alpha] - significance level\n* @param {Array} [options.groups] - array of group indicators\n* @returns {(null|Error)} null or an error\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( '1Lf2V', options ) );\n\t}\n\tif ( hasOwnProp( options, 'alpha' ) ) {\n\t\topts.alpha = options.alpha;\n\t\tif ( !isNumber( opts.alpha ) || isnan( opts.alpha ) ) {\n\t\t\treturn new TypeError( format( '1Lf8P', 'alpha', opts.alpha ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'groups' ) ) {\n\t\topts.groups = options.groups;\n\t\tif ( !isArray( opts.groups ) ) {\n\t\t\treturn new TypeError( format( '1Lf8Z', 'groups', opts.groups ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport incrmean from '@stdlib/stats-incr-mean';\nimport abs from '@stdlib/math-base-special-abs';\n\n\n// MAIN //\n\n/**\n* Calculates the absolute difference of the values and the respective group means for the elements of a numeric array.\n*\n* @private\n* @param {Array} x - input array\n* @param {Array} groups - array of group labels\n* @param {Array} levels - array of distinct group levels\n* @returns {Array} array of absolute centered values\n*\n* @example\n* var x = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ];\n* var groups = [ 'a', 'b', 'a', 'a', 'b', 'b', 'a', 'a', 'b', 'b' ];\n* var levels = [ 'a', 'b' ];\n* var out = absMeanDiff( x, groups, levels );\n* // returns [ ~3.6, 4.4, ..., ~3.6 ]\n*/\nfunction absMeanDiff( x, groups, levels ) {\n\tvar accumulators = {};\n\tvar means = {};\n\tvar len = x.length;\n\tvar out = [];\n\tvar i;\n\tfor ( i = 0; i < levels.length; i++ ) {\n\t\taccumulators[ levels[ i ] ] = incrmean();\n\t}\n\tfor ( i = 0; i < len; i++ ) {\n\t\taccumulators[ groups[ i ] ]( x[ i ] );\n\t}\n\tfor ( i = 0; i < levels.length; i++ ) {\n\t\tmeans[ levels[ i ] ] = accumulators[ levels[ i ] ]();\n\t}\n\tfor ( i = 0; i < len; i++ ) {\n\t\tout.push( abs( x[ i ] - means[ groups[ i ] ] ) );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default absMeanDiff;\n"],"names":["ascending","a","b","print","opts","decision","dgts","str","arguments","length","isObject","TypeError","format","hasOwnProp","isPositiveInteger","digits","isBoolean","this","method","roundn","df","statistic","pValue","rejected","alpha","levene","options","result","groups","levels","args","arg","err","out","i","j","k","isPlainObject","isNumber","isnan","isArray","validate","arr","len","val","slice","sort","unique","Error","concat","push","x","accumulators","means","incrmean","abs","absMeanDiff","anova1","setReadOnly","treatment","error"],"mappings":"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"}