{"version":3,"file":"index.mjs","sources":["../lib/absdiff.js","../lib/validate.js","../lib/unique.js","../lib/print.js","../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar incrmean = require( '@stdlib/stats-incr-mean' );\nvar abs = require( '@stdlib/math-base-special-abs' );\n\n\n// MAIN //\n\n/**\n* Calculates the absolute difference of the values and the respective group means for the elements of a numeric array.\n*\n* @private\n* @param {Array} x - input array\n* @param {Array} groups - array of group labels\n* @param {Array} levels - array of distinct group levels\n* @returns {Array} array of absolute centered values\n*\n* @example\n* var x = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ];\n* var groups = [ 'a', 'b', 'a', 'a', 'b', 'b', 'a', 'a', 'b', 'b' ];\n* var levels = [ 'a', 'b' ];\n* var out = absMeanDiff( x, groups, levels );\n* // returns [ ~3.6, 4.4, ..., ~3.6 ]\n*/\nfunction absMeanDiff( x, groups, levels ) {\n\tvar accumulators = {};\n\tvar means = {};\n\tvar len = x.length;\n\tvar out = [];\n\tvar i;\n\tfor ( i = 0; i < levels.length; i++ ) {\n\t\taccumulators[ levels[ i ] ] = incrmean();\n\t}\n\tfor ( i = 0; i < len; i++ ) {\n\t\taccumulators[ groups[ i ] ]( x[ i ] );\n\t}\n\tfor ( i = 0; i < levels.length; i++ ) {\n\t\tmeans[ levels[ i ] ] = accumulators[ levels[ i ] ]();\n\t}\n\tfor ( i = 0; i < len; i++ ) {\n\t\tout.push( abs( x[ i ] - means[ groups[ i ] ] ) );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = absMeanDiff;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isArray = require( '@stdlib/assert-is-array' );\nvar isNumber = require( '@stdlib/assert-is-number' ).isPrimitive;\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar isnan = require( '@stdlib/assert-is-nan' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination for validated options\n* @param {Options} options - function options\n* @param {number} [options.alpha] - significance level\n* @param {Array} [options.groups] - array of group indicators\n* @returns {(null|Error)} null or an error\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'alpha' ) ) {\n\t\topts.alpha = options.alpha;\n\t\tif ( !isNumber( opts.alpha ) || isnan( opts.alpha ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a number. Option: `%s`.', 'alpha', opts.alpha ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'groups' ) ) {\n\t\topts.groups = options.groups;\n\t\tif ( !isArray( opts.groups ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an array. Option: `%s`.', 'groups', opts.groups ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","\n/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// FUNCTIONS //\n\n/**\n* Comparator function to sort values in ascending order.\n*\n* @private\n* @param {number} a - first value\n* @param {number} b - second value\n* @returns {number} difference between `a` and `b`\n*/\nfunction ascending( a, b ) {\n\treturn a - b;\n}\n\n\n// MAIN //\n\n/**\n* Removes duplicate values from a numeric array.\n*\n* @private\n* @param {NumberArray} arr - array to be deduped\n* @returns {NumberArray} deduped array\n*/\nfunction unique( arr ) {\n\tvar len;\n\tvar val;\n\tvar i;\n\tvar j;\n\n\tarr = arr.slice();\n\tarr.sort( ascending );\n\tlen = arr.length;\n\n\t// Loop through the array, only incrementing a pointer when successive values are different. When a succeeding value is different, move the pointer and set the next value. In the trivial case where all array elements are unique, we incur a slight penalty in resetting the element value for each unique value. In other cases, we simply move a unique value to a new position in the array. The end result is a sorted array with unique values.\n\tfor ( i = 1, j = 0; i < len; i++ ) {\n\t\tval = arr[ i ];\n\t\tif ( arr[ j ] !== val ) {\n\t\t\tj += 1;\n\t\t\tarr[ j ] = val;\n\t\t}\n\t}\n\t// Truncate the array:\n\tarr.length = j + 1;\n\treturn arr;\n}\n\n\n// EXPORTS //\n\nmodule.exports = unique;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert-is-positive-integer' );\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar isBoolean = require( '@stdlib/assert-is-boolean' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar roundn = require( '@stdlib/math-base-special-roundn' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Pretty-prints test output.\n*\n* @param {Object} [opts] - options object\n* @param {PositiveInteger} [opts.digits=4] - number of digits after the decimal point\n* @param {boolean} [opts.decision=true] - boolean indicating whether to print the test decision\n* @throws {TypeError} Options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {string} formatted output\n*/\nfunction print( opts ) { // eslint-disable-line stdlib/no-redeclare\n\t/* eslint-disable no-invalid-this */\n\tvar decision;\n\tvar dgts;\n\tvar str;\n\n\tdgts = 4;\n\tdecision = true;\n\tif ( arguments.length > 0 ) {\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. `options` argument must be an options object. Value: `%s`.', opts ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'digits' ) ) {\n\t\t\tif ( !isPositiveInteger( opts.digits ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'digits', opts.digits ) );\n\t\t\t}\n\t\t\tdgts = opts.digits;\n\t\t}\n\t\tif ( hasOwnProp( opts, 'decision' ) ) {\n\t\t\tif ( !isBoolean( opts.decision ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'decision', opts.decision ) );\n\t\t\t}\n\t\t\tdecision = opts.decision;\n\t\t}\n\t}\n\n\tstr = '';\n\tstr += this.method;\n\tstr += '\\n\\n';\n\tstr += 'Null hypothesis: The variances in all groups are the same.';\n\tstr += '\\n\\n';\n\tstr += '    df 1: ' + roundn( this.df[ 0 ], -dgts ) + '\\n';\n\tstr += '    df 2: ' + roundn( this.df[ 1 ], -dgts ) + '\\n';\n\tstr += '    F score: ' + roundn( this.statistic, -dgts ) + '\\n';\n\tstr += '    P Value: ' + roundn( this.pValue, -dgts ) + '\\n';\n\tstr += '\\n';\n\tif ( decision ) {\n\t\tstr += 'Test Decision: ';\n\t\tif ( this.rejected ) {\n\t\t\tstr += 'Reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t} else {\n\t\t\tstr += 'Fail to reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t}\n\t\tstr += '\\n';\n\t}\n\treturn str;\n}\n\n\n// EXPORTS //\n\nmodule.exports = print;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPlainObject = require( '@stdlib/assert-is-plain-object' );\nvar setReadOnly = require( '@stdlib/utils-define-read-only-property' );\nvar format = require( '@stdlib/string-format' );\nvar anova1 = require( '@stdlib/stats-anova1' );\nvar absMeanDiff = require( './absdiff.js' );\nvar validate = require( './validate.js' );\nvar unique = require( './unique.js' );\nvar print = require( './print.js' ); // eslint-disable-line stdlib/no-redeclare\n\n\n// MAIN //\n\n/**\n* Computes Levene's test for equal variances.\n*\n* @param {...NumericArray} arguments - either two or more number arrays or a single numeric array if provided an array of group indicators\n* @param {Options} [options] - function options\n* @param {number} [options.alpha=0.05] - significance level\n* @param {Array} [options.groups] - array of group indicators\n* @throws {TypeError} must provide array-like arguments\n* @throws {RangeError} alpha option must be a number on the interval `[0,1]`\n* @throws {Error} must provide at least two array-like arguments if `groups` is not provided\n* @throws {TypeError} Options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Object} test results\n*\n* @example\n* // Data from Hollander & Wolfe (1973), p. 116:\n* var x = [ 2.9, 3.0, 2.5, 2.6, 3.2 ];\n* var y = [ 3.8, 2.7, 4.0, 2.4 ];\n* var z = [ 2.8, 3.4, 3.7, 2.2, 2.0 ];\n*\n* var out = levene( x, y, z );\n* // returns {...}\n*/\nfunction levene() {\n\tvar options;\n\tvar result;\n\tvar groups;\n\tvar levels;\n\tvar args;\n\tvar opts;\n\tvar arg;\n\tvar err;\n\tvar out;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tk = arguments.length;\n\targs = [];\n\topts = {};\n\tif ( isPlainObject( arguments[ k-1 ] ) ) {\n\t\toptions = arguments[ k-1 ];\n\t\tk -= 1;\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t} else {\n\t\toptions = {};\n\t}\n\tif ( opts.groups ) {\n\t\targs = arguments[ 0 ];\n\t\tgroups = opts.groups;\n\t\tlevels = unique( groups );\n\t\tk = levels.length;\n\t\tif ( k < 2 ) {\n\t\t\tthrow new Error( format( 'invalid option. `%s` option must contain at least two unique elements. Value: `%s`.', 'groups', levels ) );\n\t\t}\n\t} else {\n\t\tgroups = [];\n\t\targs = [];\n\t\tlevels = [];\n\t\tfor ( i = 0; i < k; i++ ) {\n\t\t\targ = arguments[ i ];\n\t\t\tif ( arg.length === 0 ) {\n\t\t\t\tthrow new Error( format( 'invalid argument. Provided arrays cannot be empty. Value: `%s`.', arg ) );\n\t\t\t}\n\t\t\targs = args.concat( arg );\n\t\t\tfor ( j = 0; j < arg.length; j++ ) {\n\t\t\t\tgroups.push( i );\n\t\t\t}\n\t\t\tlevels.push( i );\n\t\t}\n\t}\n\targs = absMeanDiff( args, groups, levels );\n\tresult = anova1( args, groups, options );\n\tout = {};\n\tsetReadOnly( out, 'rejected', result.rejected );\n\tsetReadOnly( out, 'alpha', result.alpha );\n\tsetReadOnly( out, 'pValue', result.pValue );\n\tsetReadOnly( out, 'statistic', result.statistic );\n\tsetReadOnly( out, 'df', [ result.treatment.df, result.error.df ] );\n\tsetReadOnly( out, 'method', 'Levene\\'s test for Homogeneity of Variance' );\n\tsetReadOnly( out, 'print', print );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = levene;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute Levene's test for equal variances.\n*\n* @module @stdlib/stats-levene-test\n*\n* @example\n* var leveneTest = require( '@stdlib/stats-levene-test' );\n*\n* // Data from Hollander & Wolfe (1973), p. 116:\n* var x = [ 2.9, 3.0, 2.5, 2.6, 3.2 ];\n* var y = [ 3.8, 2.7, 4.0, 2.4 ];\n* var z = [ 2.8, 3.4, 3.7, 2.2, 2.0 ];\n*\n* var out = leveneTest( x, y, z );\n* // returns {...}\n*/\n\n// MODULES //\n\nvar leveneTest = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = leveneTest;\n"],"names":["incrmean","require$$0","abs","require$$1","absdiff","x","groups","levels","i","accumulators","means","len","length","out","push","isArray","isNumber","isPrimitive","isObject","require$$2","isnan","require$$3","hasOwnProp","require$$4","format","require$$5","validate_1","opts","options","alpha","TypeError","ascending","a","b","unique_1","arr","val","j","slice","sort","isPositiveInteger","isBoolean","roundn","isPlainObject","setReadOnly","anova1","absMeanDiff","validate","unique","require$$6","print","decision","dgts","str","arguments","digits","this","method","df","statistic","pValue","rejected","lib","result","args","arg","err","k","Error","concat","treatment","error"],"mappings":"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"}