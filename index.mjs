// Copyright (c) 2022 The Stdlib Authors. License is Apache-2.0: http://www.apache.org/licenses/LICENSE-2.0
/// <reference types="./index.d.ts" />
import t from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-plain-object@esm/index.mjs";import e from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-define-read-only-property@esm/index.mjs";import s from"https://cdn.jsdelivr.net/gh/stdlib-js/string-format@esm/index.mjs";import i from"https://cdn.jsdelivr.net/gh/stdlib-js/stats-anova1@esm/index.mjs";import n from"https://cdn.jsdelivr.net/gh/stdlib-js/stats-incr-mean@esm/index.mjs";import r from"https://cdn.jsdelivr.net/gh/stdlib-js/math-base-special-abs@esm/index.mjs";import o from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-array@esm/index.mjs";import a from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-number@esm/index.mjs";import l from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-nan@esm/index.mjs";import p from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-has-own-property@esm/index.mjs";import d from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-positive-integer@esm/index.mjs";import m from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-boolean@esm/index.mjs";import h from"https://cdn.jsdelivr.net/gh/stdlib-js/math-base-special-roundn@esm/index.mjs";var u=n,f=r;var c=function(t,e,s){var i,n={},r={},o=t.length,a=[];for(i=0;i<s.length;i++)n[s[i]]=u();for(i=0;i<o;i++)n[e[i]](t[i]);for(i=0;i<s.length;i++)r[s[i]]=n[s[i]]();for(i=0;i<o;i++)a.push(f(t[i]-r[e[i]]));return a},g=o,j=a.isPrimitive,v=t,b=l,w=p,y=s;var x=function(t,e){return v(e)?w(e,"alpha")&&(t.alpha=e.alpha,!j(t.alpha)||b(t.alpha))?new TypeError(y("invalid option. `%s` option must be a number. Option: `%s`.","alpha",t.alpha)):w(e,"groups")&&(t.groups=e.groups,!g(t.groups))?new TypeError(y("invalid option. `%s` option must be an array. Option: `%s`.","groups",t.groups)):null:new TypeError(y("invalid argument. Options argument must be an object. Value: `%s`.",e))};function V(t,e){return t-e}var E=function(t){var e,s,i,n;for((t=t.slice()).sort(V),e=t.length,i=1,n=0;i<e;i++)s=t[i],t[n]!==s&&(t[n+=1]=s);return t.length=n+1,t},T=d,O=t,P=m.isPrimitive,F=p,q=h,D=s;var H=t,L=e,N=s,R=i,k=c,z=x,A=E,B=function(t){var e,s,i;if(s=4,e=!0,arguments.length>0){if(!O(t))throw new TypeError(D("invalid argument. `options` argument must be an options object. Value: `%s`.",t));if(F(t,"digits")){if(!T(t.digits))throw new TypeError(D("invalid option. `%s` option must be a positive integer. Option: `%s`.","digits",t.digits));s=t.digits}if(F(t,"decision")){if(!P(t.decision))throw new TypeError(D("invalid option. `%s` option must be a boolean. Option: `%s`.","decision",t.decision));e=t.decision}}return i="",i+=this.method,i+="\n\n",i+="Null hypothesis: The variances in all groups are the same.",i+="\n\n",i+="    df 1: "+q(this.df[0],-s)+"\n",i+="    df 2: "+q(this.df[1],-s)+"\n",i+="    F score: "+q(this.statistic,-s)+"\n",i+="    P Value: "+q(this.pValue,-s)+"\n",i+="\n",e&&(i+="Test Decision: ",this.rejected?i+="Reject null in favor of alternative at "+100*this.alpha+"% significance level":i+="Fail to reject null in favor of alternative at "+100*this.alpha+"% significance level",i+="\n"),i};var C=function(){var t,e,s,i,n,r,o,a,l,p,d,m;if(n=[],r={},H(arguments[(m=arguments.length)-1])){if(t=arguments[m-1],m-=1,a=z(r,t))throw a}else t={};if(r.groups){if(n=arguments[0],s=r.groups,(m=(i=A(s)).length)<2)throw new Error(N("invalid option. `%s` option must contain at least two unique elements. Value: `%s`.","groups",i))}else for(s=[],n=[],i=[],p=0;p<m;p++){if(0===(o=arguments[p]).length)throw new Error(N("invalid argument. Provided arrays cannot be empty. Value: `%s`.",o));for(n=n.concat(o),d=0;d<o.length;d++)s.push(p);i.push(p)}return n=k(n,s,i),e=R(n,s,t),L(l={},"rejected",e.rejected),L(l,"alpha",e.alpha),L(l,"pValue",e.pValue),L(l,"statistic",e.statistic),L(l,"df",[e.treatment.df,e.error.df]),L(l,"method","Levene's test for Homogeneity of Variance"),L(l,"print",B),l};export{C as default};
//# sourceMappingURL=index.mjs.map
